import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";

import { ContentContainer } from "../../components/common/ContentContainer";
import { ContentContainerTitle } from "../../components/common/ContentContainerTitle";
import { MainContainer } from "../../components/common/MainContainer";
import { Navigation } from "../../components/common/Navigation";
import { trpc } from "../../utils/trpc";

const ChampionPage: NextPage = () => {
  const router = useRouter();
  const championQuery = trpc.champions.getChampion.useQuery({
    championId: parseInt(
      typeof router.query.id === "string" ? router.query.id : "1"
    ),
  });

  return (
    <>
      <Head>
        <title>Elite Bronze - {championQuery.data?.name}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MainContainer>
        <Navigation />

        <ContentContainer>
          <ContentContainerTitle text={championQuery.data?.name ?? ""}>
            <div className="h-24 w-24 items-center md:flex lg:hidden">
              <Image
                width={100}
                height={100}
                src={championQuery.data?.iconUrl ?? ""}
                alt={`${championQuery.data?.name}`}
              />
            </div>
          </ContentContainerTitle>

          {championQuery.data && (
            <div className="flex h-full w-full gap-8 overflow-hidden p-8">
              <div className="flex flex-col gap-8 md:w-full lg:flex-1">
                <StatContainer title="Mecze">
                  <StatContainerItem>
                    Wybory: {championQuery.data.properties.general.picks}
                  </StatContainerItem>
                  <StatContainerItem>
                    Wygrane: {championQuery.data.properties.general.wins}
                  </StatContainerItem>
                  <StatContainerItem>
                    Przegrane: {championQuery.data.properties.general.loses}
                  </StatContainerItem>
                  <StatContainerItem>
                    Winratio: {championQuery.data.properties.general.winratio}
                  </StatContainerItem>
                </StatContainer>

                <StatContainer title="Inne">
                  <StatContainerItem>
                    Bany: {championQuery.data.properties.general.bans}
                  </StatContainerItem>
                  <StatContainerItem>
                    Średnio CS: {championQuery.data.properties.general.avgCs}
                  </StatContainerItem>
                  <StatContainerItem>
                    Niebieski: {championQuery.data.properties.blueSide.picks}
                  </StatContainerItem>
                  <StatContainerItem>
                    Czerwony: {championQuery.data.properties.redSide.picks}
                  </StatContainerItem>
                </StatContainer>

                <div className="flex flex-1 gap-8 overflow-hidden">
                  <StatList
                    title="Przywoływacze"
                    items={championQuery.data.myPlayerGamesGrouped}
                  />
                  <StatList
                    title="Przeciwnicy"
                    items={championQuery.data.opponentPlayerGamesGrouped}
                  />
                  <StatList
                    title="Banujący"
                    items={championQuery.data.playersBanning}
                  />
                </div>
              </div>
              <div className="h-full w-96 items-stretch md:hidden lg:flex">
                <Image
                  width={400}
                  height={500}
                  src={championQuery.data?.loadingUrl ?? ""}
                  alt={`${championQuery.data?.name}`}
                />
              </div>
            </div>
          )}
        </ContentContainer>
      </MainContainer>
    </>
  );
};

const StatContainer: React.FC<{
  title: string;
  children: React.ReactNode;
}> = (props) => {
  return (
    <div className="relative flex h-48 w-full justify-around gap-8 rounded-xl border-2 border-violet-900 p-8">
      <span className="absolute -top-5 left-8 bg-zinc-800 px-2 text-2xl font-bold text-violet-900">
        {props.title}
      </span>
      {props.children}
    </div>
  );
};

const StatContainerItem: React.FC<{ children: React.ReactNode }> = (props) => {
  return (
    <div className="h-32 w-32 rounded-xl border-2 border-violet-900">
      {props.children}
    </div>
  );
};

const StatList: React.FC<{
  title: string;
  items: { name: string | null; count?: number; _count?: { _all: number } }[];
}> = (props) => {
  return (
    <div className="flex h-full w-1/3 flex-col rounded-xl border-2 border-violet-900">
      <div className="h-8 w-full border-b-2 border-violet-900 text-center">
        <span className="text-xl font-bold text-violet-900">{props.title}</span>
      </div>
      <div className="flex-1 overflow-auto">
        {props.items.map((item) => {
          return (
            <div
              key={item.name}
              className="flex w-full justify-between border-b-2 border-b-violet-900 p-2 text-violet-400"
            >
              <span className="font-bold">{item.name}</span>
              <span className="font-bold">
                {item._count?._all ?? item.count ?? 0}
              </span>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default ChampionPage;
